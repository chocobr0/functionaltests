const info = require('debug')('test:sign-up:info')
const config = require('../config')
const utils = require('../utils')
const yopmail = require('../utils/yopmail.js')
const captchaHelper = require('../utils/helpers/captcha.js')
const userHelper = require('../utils/helpers/user.js')
const loginHelper = require('../utils/helpers/login.js')

xdescribe('HPID Sign Up', function () {
  it('should have the right client display name', function () {
    const displayName = browser.getText('.client-name div')
    expect(displayName).toContain(config.clientName)
  })

  it('should have hp icon', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    expect(browser.getAttribute('.hp-icon > path', 'd')).toContain(config.hpIcon)
  })

  it('should have blue banner and following correct client texts', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    var banner = $('.sign-up-default-bg')
    expect(banner.getCssProperty('background-color').parsed.hex).toContain(config.defaultBannerColor)
    expect(browser.getText('.sign-up-title')).toContain(config.signUpHeader)
    expect(browser.getText('.sign-up-desc')).toContain(config.signUpDesc)
  })

  it('should display all fields correctly', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    expect(browser.getAttribute('#firstName', 'placeholder')).toContain(config.placeholderFirstName)
    expect(browser.getAttribute('#lastName', 'placeholder')).toContain(config.placeholderLastName)
    expect(browser.getAttribute('#email', 'placeholder')).toContain(config.placeholderEmail)
    expect(browser.getText('.vn-form-field__tip')).toContain(config.hintEmailDesc)
    expect(browser.getAttribute('#newPassword', 'placeholder')).toContain(config.placeholderNewPassword)
    expect(browser.getAttribute('#confirmPassword', 'placeholder')).toContain(config.placeholderConfirmPassword)
    expect(browser.getAttribute('#passwordContainer > svg > path', 'd')).not.toContain(config.eyeIconClosed)
    browser.scroll(0, 250)
    expect(browser.getAttribute('.vn-checkbox__check-icon', 'style')).toContain('display: block;')
    expect(browser.getText('.vn-checkbox__span-text')).toContain(config.checkboxDesc)
    browser.waitForVisible('.sign-up-tnc')
    expect(browser.getText('.sign-up-tnc > span')).toContain(config.signUpAgreementDesc)
    expect(browser.isExisting('div.sign-up-tnc > span > span')).toBe(true)
    expect(browser.isExisting('a[href="https://ssl.www8.hp.com/us/en/privacy/privacy.html"]')).toBe(true)
    var button = $('.vn-button--critical')
    expect(button.getCssProperty('background-color').parsed.hex).toContain(config.submitButtonColor)
    expect(browser.isExisting('div.text-center.link-to-login > a')).toBe(true)
  })

  it('should show red error text for fields left blank, fields outlined in red, and reverts when tapped', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    browser.scroll(0, 500)
    browser.click('button[type="submit"]')
    browser.waitForVisible('.vn-form-field__error-message')
    browser.scroll(0, -500)
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.firstNameErr)
    expect(browser.getAttribute('#firstName', 'class')).toContain('vn-textbox--error')
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.lastNameErr)
    expect(browser.getAttribute('#lastName', 'class')).toContain('vn-textbox--error')
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.emailEnterErr)
    expect(browser.getAttribute('#email', 'class')).toContain('vn-textbox--error')
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.createPasswordErr)
    expect(browser.getAttribute('#newPassword', 'class')).toContain('vn-textbox--error')
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.enterPasswordErr)
    expect(browser.getAttribute('#confirmPassword', 'class')).toContain('vn-textbox--error')
    var errorField = $('.vn-form-field__error-message')
    expect(errorField.getCssProperty('color').parsed.hex).toContain(config.errorTextColor)
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.captchaErr)
    browser.click('#firstName')
    expect(browser.getAttribute('#firstName', 'class')).not.toContain('vn-textbox--error')
    browser.click('#lastName')
    expect(browser.getAttribute('#lastName', 'class')).not.toContain('vn-textbox--error')
    browser.click('#email')
    expect(browser.getAttribute('#email', 'class')).not.toContain('vn-textbox--error')
    expect(browser.getText('.vn-form-field__tip')).toContain(config.hintEmailDesc)
    var hintField = $('.vn-form-field__tip')
    expect(hintField.getCssProperty('color').parsed.hex).toContain(config.hintTextColor)
    browser.click('#newPassword')
    expect(browser.getAttribute('#newPassword', 'class')).not.toContain('vn-textbox--error')
    browser.click('#confirmPassword')
    expect(browser.getAttribute('#confirmPassword', 'class')).not.toContain('vn-textbox--error')
    captchaHelper.validateCaptcha()
    expect(browser.getText('.vn-form-field__error-message')).not.toContain(config.captchaErr)
  })

  it('should show error string for unmatching password values', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    browser.setValue('#newPassword', config.userPassword)
    browser.setValue('#confirmPassword', config.wrongPassword)
    browser.scroll(0, 250)
    browser.click('button[type="submit"]')
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.passwordMatchErr)
  })

  it('should show error string for weak password value', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    browser.setValue('#newPassword', config.invalidSingleCharPassword)
    browser.setValue('#confirmPassword', config.wrongPassword)
    browser.scroll(0, 250)
    browser.click('button[type="submit"]')
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.strongerPasswordErr)
  })

  it('should pass each password strength meter level relative to a valid case', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    browser.setValue('#newPassword', 'Test')
    browser.waitForVisible('.vn-strength-meter')
    expect(browser.getHTML('.vn-strength-meter')).toContain('red')
    expect(browser.getHTML('.vn-strength-meter')).toContain('25%')

    browser.setValue('#newPassword', 'Test1234')
    browser.waitForVisible('.vn-strength-meter')
    expect(browser.getHTML('.vn-strength-meter')).toContain('yellow')
    expect(browser.getHTML('.vn-strength-meter')).toContain('50%')

    browser.setValue('#newPassword', 'Test1234!@#')
    browser.waitForVisible('.vn-strength-meter')
    expect(browser.getHTML('.vn-strength-meter')).toContain('green')
    expect(browser.getHTML('.vn-strength-meter')).toContain('75%')

    browser.setValue('#newPassword', 'Test1234!@#ABCD')
    browser.waitForVisible('.vn-strength-meter')
    expect(browser.getHTML('.vn-strength-meter')).toContain('green-dark')
    expect(browser.getHTML('.vn-strength-meter')).toContain('100%')
  })

  it('should link to the terms and conditions page', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    browser.click('div.sign-up-tnc > span > span > a')
    expect(browser.getText('.tnc-content')).toContain(config.welcomeToHPDesc)
  })

  it('should link to the privacy page', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    browser.click('a[href="https://ssl.www8.hp.com/us/en/privacy/privacy.html"]')
    var x = browser.getTabIds()
    browser.switchTab(x[1])
    browser.waitForVisible('.font-lh3')
    expect(browser.getUrl()).toContain('/privacy.html')
  })

  it('should fail account creation with error under email address field', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    userHelper.userCreation(config.user)
    captchaHelper.validateCaptcha()
    browser.click('.vn-checkbox__span')
    browser.click('button[type="submit"]')
    browser.waitForText('.vn-form-field__error-message')
    expect(browser.getText('.vn-form-field__error-message')).toContain(config.accountExistsErr)
  })

  it('should show open eye icon and masks password field values', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    expect(browser.getAttribute('#passwordContainer > svg > path', 'd')).not.toContain(config.eyeIconClosed)
    browser.setValue('#newPassword', config.password)
    browser.setValue('#confirmPassword', config.password)
    expect(browser.getAttribute('#newPassword', 'type')).toContain('password')
    expect(browser.getAttribute('#confirmPassword', 'type')).toContain('password')
  })

  it('should create new user', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    config.userEmail = userHelper.emailCreation()
    info(config.userEmail)
    userHelper.userCreation(config.userEmail)
    captchaHelper.validateCaptcha()
    browser.click('.vn-checkbox__span')
    browser.click('button[type="submit"]')
    browser.waitForExist('#otp')
    expect(browser.getText('.hpid-header h6')).toBe(config.verifyEmail)
  })

  it('should confirm email of new user creation', function () {
    browser.call(function () {
      return new Promise(function (resolve, reject) {
        yopmail.getCode(config.userEmail, (err, res) => {
          if (err) {
            return reject(err)
          }
          config.verifyCode = res
          resolve(res)
        })
      })
    })
    browser.waitForExist('#otp')
    browser.setValue('#otp', config.verifyCode)
    browser.click('button[type="button"]')
    browser.waitForExist('.headerPart h4')
    expect(browser.getText('.headerPart h4')).toBe(config.accountHeader)
  })

  it('should prompt user to accept terms of new region or country ', function () {
    browser.waitForExist('.headerPart h4')
    browser.click('svg[data-type="MODAL_COUNTRY_TYPE"]')
    browser.click('.vn-dropdown__title')
    browser.click(config.regionSelector)
    browser.click('#primary-id')
    browser.refresh()
    browser.waitForExist('svg.vn-icon:nth-child(2)')
    browser.click('svg.vn-icon:nth-child(2) > path:nth-child(1)')
    browser.click('.signOut_clickable')
    loginHelper.userLogin(config.userEmail)
    loginHelper.userPassword(config.userPassword)
    browser.waitForExist('button.vn-button:nth-child(3)')
    expect(browser.getUrl()).toContain('/terms-and-conditions')
    browser.click('button.vn-button:nth-child(3)')
    browser.waitForVisible('button.vn-button:nth-child(3)', 5000, true)
    browser.waitForVisible('.preWordWrapStyle')
    browser.scroll(0, 100000)
    browser.click('#primary-id')
    browser.waitForExist('.headerPart h4')
  })
})

describe('New', function () {
  it('should redirect to expected uri using a client that does not use email verification', function () {
    browser.url(utils.getLoginUI())
    browser.waitForExist('.account-creation a')
    browser.click('.account-creation a')
    config.userEmail = userHelper.emailCreation()
    info(config.userEmail)
    userHelper.userCreation(config.userEmail)
    captchaHelper.validateCaptcha()
    browser.click('.vn-checkbox__span')
    browser.click('button[type="submit"]')
    browser.waitForExist('button[type="submit"]', true)
    expect(browser.getUrl()).toContain(config.redirect_uri)
  })
})